・基本的に中心点から始まり、その中心点から各部屋に部屋を配置するというものです。この例では、開始部屋には作成できる4つの異なる接続があるため、ランダムな順序でこれら4つの接続すべてで部屋を配置することを決定します。スペースがたくさんあるので、最初はほとんど何でも配置でき、接続できる接続戸口がある部屋を配置しますが、このようなドアに来ると問題が発生します。左側には何かを配置するので、実際に配置できるものは前に配置したものに基づいて制限されます。そのため、ランダムな方法でドアを訪問します。したがって、この部屋には何も配置できません。仮説的に適合するか、適合する可能性があるため、これらをツリー状に繰り返し配置し続けます。この場合、ここには何も配置できませんが、ダンジョン用の部屋の巨大な入れ子に拡張されるだけです。潜在的な問題の1つは、これについて注意しておきますが、木の特定の枝や根の上にいるときは、木の別の根に渡ることはできず、それはいじることができるだけです。私は世界にダウンロードして、データパックは、GitHubでダウンロードできます。説明では、遊んでみるためにリンクされていますが、これは、このタイプのダンジョン生成の基本を提供するものであり、高度にグリッドベースのダンジョンを作成したい場合は、ドアが常に互いに接触しているなどの特定のルールを保証できます。実際に特定の部屋やルートを相互にリンクさせることもできます。つまり、これが意味するのは、ここのセクションがこのセクションには決して接触しないことがわかります。ここでは、それらは別の種類のルート上に構築されているため、接続されていません、ああ、ある時点で接続される可能性がありますが、おそらく最初に戻ることはできません。したがって、接続を確立することは少し論理的に理にかなっていますここにいますが、それができないのは、それを行う方法がわからないためです。もちろん、明らかにドアから出ていくことはできますが、それは、どこにも通じていないドアを実際にブロックするコードを追加していないためです。これも実装ですので、この内部で使用できる初期設定の一部を実行できます。ワールドダウンロードをダウンロードして、デモを試してみることをお勧めします。ただし、使用できるさまざまな設定の一部は次のとおりです。最大深度は、可能であればどのくらいの深さになるかを示します。したがって、これを15に設定すると、開始部屋から15の部屋を一列に配置しようとしますが、公平にするために中心から拡張する必要があるため、長い行が1つだけあるだけで、残りはスペースがないために配置できないので、中心から始めてリング状に構築し、次に実行できる設定は、デフォルトで設定されているドアです。30までです。これは基本的に私が実行したいと思うのと同じくらい速いです。時々コマンドのコストが高くなりますが、場合によってはコストが低くなります。反復ごとに30ドアに設定すると、基本的には最大コマンド制限のすぐ下でコマンドが制限されるため、次のようにすることができます。非常に大きなダンジョンを非常に迅速に構築します。当初は、物事を説明してバックグラウンドに表示できるように、アニメーションの目的で1つだけに決めましたが、次の設定は次の設定のようになります。おそらくデフォルトでオンになっているdynaclearです。しかし、dynaclearが行うことは、指定したレベル値で構築したダンジョンに対して、各部屋のマーカーを使用してその部屋があった場所を保存することで前のダンジョンをクリアすることです。かなりの数のマーカーエンティティがスポーンされることになるため、少しコストがかかります部屋ごとにそのために使用されるマーカーが1つあるため、次の設定が着席するなど、以前の作業を削除できます。着席すると何ができるかというと、使用するコマンドが少し多くなり、実際には1つあたりのコマンド数が多くなります。部屋の配置は、基本的に以前に構築したダンジョンを再構築できるため、データパックに問題があるのか??、配置した部屋に問題があるのか??を確認するデバッグに便利です。コピーした場合は、このコマンドを実行します。以前のシードを新しいシードにコピーして、再度実行すると、まったく同じビルドが生成されたことがわかります。ビデオに戻って、それらが同じであることを確認できますが、まったく同じである必要があります。最後に、最後の注目すべき設定はドットレベルです。ドットレベルは基本的に構築しているレベルを指定します。そのため、ドットレベルを1に変更すると、IDが1のダンジョンを構築しようとしますが、そのレベル内には構築がありません。値なので、この場合は何もしないので、これを表示する理由はありませんが、基本的に、さまざまな部屋のプールから選択できるため、さまざまなダンジョンを構築したり、一度に複数のダンジョンを構築したりできます。実際には同じレベルの複数をサポートしていますが、複数のレベルをサポートしているため、実際にダンジョンを構築したい場合は、どこから開始するかを指定し、正しいビルド設定でビルドを実行します。ダンジョンをクリアしたい場合はスラッシュを実行してください。関数のビルドスラッシュダイナクリアスラッシュスタートそれを実行すると、ルートを除くすべてのダンジョンがクリアされます。それはちょっと悪いですね、ルートをクリアする方法はありませんが、自分で実装するか、そのままにしておくことができます私の設計ではルートは実際にこれが使用される目的で移動することはないので、あなたが世界に参加するとき、これがあなたがそれを開くことになるものであり、私があなたにチェックしてもらいたいのはスラッシュ関数のビルドスラッシュデモです。デモダンジョンとデモラストを構築できます。前のデモダンジョンを構築できます。デモラストは単なるシードであり、デモはダンジョンを構築する単なるチップです。これで、このダンジョンで遊ぶことができます。これらは、使用されている部屋です。ダンジョンからアクセスでき、これらの部屋にはさまざまな設定がたくさんあります。ここでは部屋をすばやく作成する方法を説明します。そのため、ダンジョン用の部屋を作成するときは、3つの主要なルールに従う必要があります。ルールその1は寸法です。どの方向でも4以上である必要があるため、作成できる最小の部屋は4x4x4ですが、作成できる最も薄い部屋は、任意の方向の任意の次元であり、最後の次元は4と4です。したがって、XYまたはZのいずれかの寸法が4より大きいことを確認してください。2番目のルールは、構造ブロックに適合する長方形のボリュームのみを使用できるため、ドアがある場所に何かを作成することは許可されていないということです。このような内部の面では、そうしないと誤って自分自身を上書きしてしまう可能性があります。おそらくそれが起こっても大丈夫だと思いますが、一般的なユースケースではおそらくそうではなく、構造ブロックの最大サイズに収まる必要があるため、2番目のルールに加えて、実際には32x32x32で、構造ブロックが4448x48x48であることはわかっていますが、当面は32x32x32で動作するように実装しただけです。必要に応じて48の3乗に拡張するかもしれません。それは可能ですが、いくつかのルールを変更する必要があります。たとえば、48の3乗を扱う場合、最小サイズは6x6x6に制限され、最終的なルールは、本当に必要なドアだけです。それぞれの面に1つのドアを配置します。おそらく良くないものを2つ配置すると何が起こるか、実際にはわかりません。おそらく、その2つのドアのうち実際に接続できるのは、いつでも1つだけであり、それは実際の面にあるはずです。このような構造です。実際にこの部屋にこの構造を構築し、部屋のプールに追加します。これから行うことは、これに参加するとインベントリに追加される、ドアを配置するコマンドを取得することです。ワールドですが、それはスラッシュ関数を実行するだけですエディターの場所のドアこれを実行するには自動的にレッドストーンが必要なので、それを右クリックしてドアの方向を向くと、南を向いているため南と表示されます。部屋の内側からあなたが向いている方向と一致し、これも西北東と一致します。ここで、これを誤って南に配置したとしましょう。その後、スラッシュ関数のエディターのスラッシュを実行するだけの削除を実行してください。スラッシュ削除は、ドアを含むこれらの余分なエンティティを削除します。次に行う必要があるのは、構造ブロックを配置し、構造ブロックに正しい寸法をここに表示させ、特別な名前と特別なフォルダーまたは場所を指定することです。これに関しては何をしてもよいので、エンティティも含めます。「完了」をクリックして後ろに飛んで、防具スタンドがないことを確認します。これらは視覚的な目的とデバッグのためだけなので、「保存」をクリックすると、最後に部屋が保存されました。あなたがしなければならないことは、この部屋のルールかどうか、そしてそれを配置する必要があるかどうかを示すことができるものを追加することです。それを使用するには、それを行います。そのためにはマーカーを使用します。マーカーはスラッシュ関数のエディターを使用して配置されます。この部屋以外に部屋を配置します。関数を実行するコマンドブロックを使用して、部屋の名前を希望の名前に変更できるようにします。コマンドブロックをここに配置し、チュートリアルのような名前を付けます。それをここにコピーして、今度はこのブロックの上に置きます。このブロックの上に置くと、この小さなコンパレーターが表示されます。これは私が趣味で右クリック検出方法として使用したものです。右クリックすると、部屋に関する情報が表示されます。あなたが編集しているので、このマーカーに近い限り、この部屋ではすべてが機能し、さまざまな設定から選択できるため、レベルでは基本的にどのプールにあるのかを指定できます。1回引くので、レベル0のままにします。Weightは、ループテーブルの動作と同様にアイテムの重量を指定します。そのため、部屋がある場所に収まる可能性がある場合、重量はその部屋に配置される可能性に影響します。したがって、これのウェイトを10などに設定すると、どこにでもこのような部屋が大量に表示されることになります。次に基本的にMaxがあり、これが配置できる部屋の数です。ボスルームかある種の戦利品ルーム、ああバスルームは1つだけ、またはチェストルームが3つまたは4つあると言いたいかもしれません。ゼロのままにしておくと何も配置されません。これは部屋かどうかを切り替える良い方法です。完了したエンジンにあるかどうか、最後にマイナスの値は、できるだけ多く配置することを意味します。最後の設定は、配置を開始する開始位置からの距離である最小深度であり、ゼロは最初の開始部屋から配置できることを意味します1つは、配置する前に1部屋待機することなどを意味します。または、配置できるようになる前に部屋を測定します。これは、部屋が使用可能になる前に常にすべての部屋に対して行う必要があり、これが行うことはすべての部屋に適用されます。ドア、またはその下に指定されている構造ブロックの寸法内のすべてのドアを検索しようとします。これは基本的にドアに空気が当たるまでの方向を計算します。したがって、北ドアに行くと、これは左右と読み取れます。上を下に移動すると、必要なようにドアに面し、最初の座標は左側にあるブロック数なので1、2番目は右側にあるブロック数なので3、3番目は上にあるブロック数なので12つ目と4つ目は、下に何ブロックあるかということなので、これらの測定値のいずれかが、たとえば999であれば、それは実際のドアではないことを意味します。それでは、先に進み、これで削除を押して、再測定を押しましょう。そうすれば、これは単なるデフォルトのデバッグ処理ですが、これは、その方向のドアがないことを意味します。これを使用して、適切なドアがあることを確認できます。なぜなら、これらの部屋が互いに近すぎたり、内側に配置されたりした場合だからです。特定の構成では、それらが完璧に並んでいる場合、測定を計算するときに、偶然に別の部屋からドアを拾う可能性があり、最終的に実際にこれにアクセスできるようにするには、データパックに移動し、ダンジョンフォルダーに移動します。これらのプールを実際に作成するときにコードの大部分を操作することになるため、レベルがゼロの場合はこの関数を実行することがわかります。この関数では、さらにレベルを追加したい場合は、レベルがゼロの場合にこの関数を実行することが示されています。実際にはこれを手動で行う必要があるため、レベルが1の場合は、私のダンジョンのようなデモとは別のフォルダーに移動します。その後、このデモ内でこのフォルダーをコピーできます。独自のダンジョンを作成したい場合は、名前と名前に移動できます。基本的に、マーカーの名前をplace関数コマンド、placeコマンドにリンクします。したがって、マーカーの名前は、tutorialと名付けられ、この構造の名前は、tutorialとなります。構造は大文字で保存できないことに注意してください。そのため、これらは名前に大文字を使用しており、関数内では一致しませんが、問題はありません。そして最後にrootは最初に配置される部屋です。これはちょっと言い過ぎですが、曖昧なままにしましたこれで、スラッシュリロードと入力して、最後にデモを実行するのではなく、最後にデモを実行すると、必要に応じてルートで他のことを実行できるようになります。実際にプールを変更すると、正しく動作しなくなります。これに基づいています。前のシートを適切に使用するには、すべての条件が同じである必要があります。条件を変更すると、最後のダンジョンを構築できなくなります。したがって、実行すると、次のことがわかります。ウェイト10を設定しているので、これらのグリーンルームをたくさん取得するつもりです。したがって、それらをすべて取得するつもりです。簡潔にしようとしているので、最後に注意する必要があるのは、ここにある場所です。何かを変更したいと思っていて、部屋に行ってここで何かを再生できない、またはここに何も配置されていない場合は、何かを正しくしたいと思っているので、これを閉じて、私ができないようにしたいと思っているのは明らかです。誤って地図から飛び降りることはありませんが、土で埋めるか、それとも良いアイデアを思いつくかはわかりませんが、そこで実際に何をしたいかは少し任意なので、指定しませんでした後で、あるいは皆さんが私に提案をくれるでしょうが、私はそれを曖昧なままにしたので、実際にそれを実行できる場所は、ドアに「えーっと」という関数があるかもしれません、実際にはドアに関数を追加しましょう、変更させてください申し訳ありませんが、パックを編集しながら進めており、部屋が正常に配置されていない場合に発生すると言います。その後、スタート内で私が与えたコメントをすべて見ることができますが、ただ聞いてスラッシュドアスラッシュを構築します行き止まりはOKです。スラッシュドアを作ります。スラッシュ行き止まりで、配置された場合はゼロです。つまり、それは何が起こるかを決定するために使用した単なるフラグであり、トンネル用の追加のフラグもあります。これは、トンネルを作りたかったので使用したくないものです。トンネリング手法ですが、私は実際にそれを実装することには取り組みませんでした。とにかく、これらのドアで何かをしたい場合は、setblockStoneのようなことを行うことができます。これは、ブロックをStoneに設定するだけなので、このデモを実行すると、どのドアでもそれが実行されます。これが沈静化するかどうかはわかりませんが、もう一度言いますが、おそらくそんなことは起こらないので、スコアボードを作成しましょうプレーヤーは最大深さのDGドットビルド3について設定します。そうすればおそらくそれが起こるでしょう、はい、そしてここにいくつかの石があります、大丈夫ですはい、この部屋はちょっと面白いのでよく起こりますが、そう、配置できる部屋がないときに何かを起こす方法です。これが実際にどのように機能するかについて詳しく知りたい場合は、パックを読むことをお勧めします。GitHubページでもう少し詳しい説明があるかもしれません。これが役に立ったと思って、さらに詳しく知りたい場合は、下のコメントで知らせてください。「いいね！」を残してください。また次回お会いしましょう。平和[音楽]ありがとう[音楽]外国語